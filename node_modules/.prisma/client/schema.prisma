generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64", "windows"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String              @id @default(cuid())
  email                String              @unique
  name                 String
  password             String
  role                 Role
  designation          String
  managerId            String?             @map("manager_id")
  department           String?
  departmentId         String?             @map("department_id")
  customRoleId         String?             @map("custom_role_id")
  skills               String[]
  workloadCap          Int                 @default(100) @map("workload_cap")
  overBeyondCap        Int                 @default(20) @map("over_beyond_cap")
  avatar               String?
  phoneNumber          String?             @map("phone_number")
  timezone             String?
  preferredCurrency    String?             @default("USD") @map("preferred_currency")
  notificationSettings Json                @default("{}") @map("notification_settings")
  isActive             Boolean             @default(true) @map("is_active")
  createdAt            DateTime            @default(now()) @map("created_at")
  updatedAt            DateTime            @updatedAt @map("updated_at")
  lastLoginAt          DateTime?           @map("last_login_at")
  activityLogs         ActivityLog[]
  comments             Comment[]
  assignedInitiatives  Initiative[]        @relation("InitiativeAssignee")
  createdInitiatives   Initiative[]        @relation("InitiativeCreator")
  notifications        Notification[]
  assignments          ProjectAssignment[]
  managedProjects      Project[]           @relation("ProjectManager")
  manager              User?               @relation("UserManager", fields: [managerId], references: [id])
  subordinates         User[]              @relation("UserManager")
  customRole           CustomRole?         @relation(fields: [customRoleId], references: [id])
  departmentRelation   Department?         @relation(fields: [departmentId], references: [id])
  managedDepartments   Department[]        @relation("DepartmentHead")

  @@map("users")
}

model Project {
  id             String              @id @default(cuid())
  title          String
  description    String?
  managerId      String              @map("manager_id")
  status         Status              @default(PENDING)
  priority       Priority            @default(MEDIUM)
  estimatedHours Int?                @map("estimated_hours")
  actualHours    Int?                @map("actual_hours")
  budgetAmount   Decimal?            @map("budget_amount")
  budgetCurrency String?             @default("USD") @map("budget_currency")
  timeline       String?
  tags           String[]
  version        Int                 @default(1)
  createdAt      DateTime            @default(now()) @map("created_at")
  updatedAt      DateTime            @updatedAt @map("updated_at")
  lastActivity   DateTime?           @map("last_activity")
  activityLogs   ActivityLog[]
  comments       Comment[]
  milestones     Milestone[]
  assignments    ProjectAssignment[]
  versions       ProjectVersion[]
  manager        User                @relation("ProjectManager", fields: [managerId], references: [id])

  @@map("projects")
}

model ProjectAssignment {
  id                    String   @id @default(cuid())
  projectId             String   @map("project_id")
  employeeId            String   @map("employee_id")
  involvementPercentage Int      @map("involvement_percentage")
  role                  String?
  assignedAt            DateTime @default(now()) @map("assigned_at")
  updatedAt             DateTime @updatedAt @map("updated_at")
  employee              User     @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  project               Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, employeeId])
  @@map("project_assignments")
}

model Milestone {
  id          String    @id @default(cuid())
  projectId   String    @map("project_id")
  title       String
  description String?
  dueDate     DateTime  @map("due_date")
  completed   Boolean   @default(false)
  completedAt DateTime? @map("completed_at")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("milestones")
}

model Initiative {
  id                 String           @id @default(cuid())
  title              String
  description        String?
  category           String?
  priority           Priority         @default(MEDIUM)
  status             InitiativeStatus @default(PENDING)
  estimatedHours     Int              @default(10) @map("estimated_hours")
  actualHours        Int?             @map("actual_hours")
  workloadPercentage Int              @map("workload_percentage")
  assignedTo         String?          @map("assigned_to")
  createdBy          String           @map("created_by")
  dueDate            DateTime?        @map("due_date")
  completedAt        DateTime?        @map("completed_at")
  createdAt          DateTime         @default(now()) @map("created_at")
  updatedAt          DateTime         @updatedAt @map("updated_at")
  activityLogs       ActivityLog[]
  comments           Comment[]
  assignee           User?            @relation("InitiativeAssignee", fields: [assignedTo], references: [id])
  creator            User             @relation("InitiativeCreator", fields: [createdBy], references: [id])

  @@map("initiatives")
}

model Comment {
  id           String      @id @default(cuid())
  content      String
  userId       String      @map("user_id")
  projectId    String?     @map("project_id")
  initiativeId String?     @map("initiative_id")
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")
  initiative   Initiative? @relation(fields: [initiativeId], references: [id], onDelete: Cascade)
  project      Project?    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model ActivityLog {
  id           String      @id @default(cuid())
  userId       String      @map("user_id")
  action       String
  entityType   EntityType  @map("entity_type")
  entityId     String      @map("entity_id")
  projectId    String?     @map("project_id")
  initiativeId String?     @map("initiative_id")
  details      String?
  metadata     Json?
  timestamp    DateTime    @default(now())
  initiative   Initiative? @relation(fields: [initiativeId], references: [id], onDelete: Cascade)
  project      Project?    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("activity_logs")
}

model Notification {
  id         String           @id @default(cuid())
  userId     String           @map("user_id")
  type       NotificationType
  title      String
  message    String
  entityType EntityType?      @map("entity_type")
  entityId   String?          @map("entity_id")
  priority   Priority         @default(MEDIUM)
  read       Boolean          @default(false)
  actionUrl  String?          @map("action_url")
  createdAt  DateTime         @default(now()) @map("created_at")
  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model ProjectVersion {
  id         String   @id @default(cuid())
  projectId  String   @map("project_id")
  version    Int
  snapshot   Json
  changedBy  String   @map("changed_by")
  changeType String   @map("change_type")
  createdAt  DateTime @default(now()) @map("created_at")
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, version])
  @@map("project_versions")
}

model File {
  id           String      @id @default(cuid())
  filename     String
  originalName String      @map("original_name")
  mimetype     String
  size         Int
  path         String
  userId       String?     @map("user_id")
  entityType   EntityType? @map("entity_type")
  entityId     String?     @map("entity_id")
  createdAt    DateTime    @default(now()) @map("created_at")

  @@map("files")
}

model CustomRole {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  permissions String[]
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  users       User[]

  @@map("custom_roles")
}

model Department {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  headId      String?  @map("head_id")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  users       User[]
  head        User?    @relation("DepartmentHead", fields: [headId], references: [id])

  @@map("departments")
}

enum Role {
  ADMIN
  PROGRAM_MANAGER
  RD_MANAGER
  MANAGER
  EMPLOYEE
}

enum Status {
  PENDING
  ACTIVE
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum InitiativeStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
}

enum EntityType {
  USER
  PROJECT
  INITIATIVE
  MILESTONE
  COMMENT
}

enum NotificationType {
  DEADLINE
  WORKLOAD
  ASSIGNMENT
  MILESTONE
  BUDGET
  COMMENT
  STATUS
  SYSTEM
}
